import os
import json
import tkinter as tk
from tkinter import scrolledtext, filedialog, messagebox, ttk, simpledialog
from openai import OpenAI
import subprocess
import re
import threading
import sys
import uuid
import shutil
import platform
from datetime import datetime
import markdown
import html
import venv

NEUROCOD_API_KEY = "sk-b70c2a57d1fb4c29989767b0b5e0823b"

class DarkTheme:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã"""
    @staticmethod
    def apply(root):
        root.configure(bg='#1e1e1e')
        style = ttk.Style()
        style.theme_use('clam')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤
        style.configure('.', background='#1e1e1e', foreground='#dcdcdc')
        style.configure('TFrame', background='#1e1e1e')
        style.configure('TLabel', background='#1e1e1e', foreground='#dcdcdc')
        style.configure('TButton', background='#3c3f41', foreground='#dcdcdc', 
                        borderwidth=1, relief='flat')
        style.map('TButton', background=[('active', '#4e5254')])
        style.configure('TEntry', fieldbackground='#2b2b2b', foreground='#dcdcdc')
        style.configure('TCombobox', fieldbackground='#2b2b2b', foreground='#dcdcdc')
        style.configure('Treeview', background='#252526', fieldbackground='#252526', 
                        foreground='#dcdcdc')
        style.configure('Treeview.Heading', background='#3c3f41', foreground='#dcdcdc')
        style.map('Treeview', background=[('selected', '#4e5254')])
        style.configure('Vertical.TScrollbar', background='#3c3f41', troughcolor='#1e1e1e')
        style.configure('Horizontal.TScrollbar', background='#3c3f41', troughcolor='#1e1e1e')
        style.configure('TLabelframe', background='#1e1e1e', foreground='#dcdcdc')
        style.configure('TLabelframe.Label', background='#1e1e1e', foreground='#dcdcdc')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ScrolledText
        text_bg = '#2b2b2b'
        text_fg = '#dcdcdc'
        
        return {
            'text_bg': text_bg,
            'text_fg': text_fg,
            'select_bg': '#4e5254',
            'insert_bg': '#dcdcdc'
        }

class ContextMenu:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –≤–∏–¥–∂–µ—Ç–æ–≤"""
    def __init__(self, widget):
        self.widget = widget
        self.menu = tk.Menu(widget, tearoff=0, bg='#3c3f41', fg='#dcdcdc')
        self.menu.add_command(label="–í—ã—Ä–µ–∑–∞—Ç—å", command=self.cut)
        self.menu.add_command(label="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", command=self.copy)
        self.menu.add_command(label="–í—Å—Ç–∞–≤–∏—Ç—å", command=self.paste)
        self.menu.add_command(label="–í—ã–¥–µ–ª–∏—Ç—å –≤—Å–µ", command=self.select_all)
        
        widget.bind("<Button-3>", self.show_menu)
    
    def show_menu(self, event):
        self.menu.tk_popup(event.x_root, event.y_root)
    
    def cut(self):
        self.widget.event_generate("<<Cut>>")
    
    def copy(self):
        self.widget.event_generate("<<Copy>>")
    
    def paste(self):
        self.widget.event_generate("<<Paste>>")
    
    def select_all(self):
        self.widget.tag_add('sel', '1.0', 'end')

class NeuroCodApp:
    def __init__(self, root):
        self.root = root
        root.title("NeuroCod Pro - AI Development Suite")
        root.geometry("1200x800")
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
        text_colors = DarkTheme.apply(root)
        
        # API Key Setup
        self.api_key = tk.StringVar(value=NEUROCOD_API_KEY)
        
        # Project settings
        default_dir = os.path.join(os.path.expanduser("~"), "NeuroCodProjects")
        self.project_dir = tk.StringVar(value=default_dir)
        self.current_project_path = ""
        self.current_project_data = {}
        self.current_file = None
        
        # –ò—Å—Ç–æ—Ä–∏—è –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.project_history = []
        self.chat_history = []
        self.project_steps = []
        self.current_step = 0
        self.project_id = str(uuid.uuid4())[:8]
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AI
        self.model = "deepseek-coder"
        self.temperature = 0.7
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets(text_colors)
        self.load_config()
        self.load_project_history()
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.add_to_chat("NeuroCod: –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å.", "ai")
    
    def resource_path(self, relative_path):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —Ä–µ—Å—É—Ä—Å–∞–º –¥–ª—è PyInstaller"""
        try:
            base_path = sys._MEIPASS
        except Exception:
            base_path = os.path.abspath(".")
        return os.path.join(base_path, relative_path)
    
    def browse_directory(self):
        """–í—ã–±–æ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
        directory = filedialog.askdirectory(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤",
            initialdir=self.project_dir.get()
        )
        if directory:
            self.project_dir.set(directory)
            self.add_to_chat(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤: {directory}", "system")
    
    def create_widgets(self, text_colors):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π
        main_pane = tk.PanedWindow(self.root, orient=tk.HORIZONTAL, sashrelief=tk.RAISED, sashwidth=4, bg='#252526')
        main_pane.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–º –∏ —á–∞—Ç
        left_frame = ttk.Frame(main_pane, width=400)
        main_pane.add(left_frame)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –†–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–¥–∞ –∏ –æ–±–æ–∑—Ä–µ–≤–∞—Ç–µ–ª—å —Ñ–∞–π–ª–æ–≤
        right_frame = ttk.Frame(main_pane)
        main_pane.add(right_frame)
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞–Ω–µ–ª–µ–π
        main_pane.paneconfig(left_frame, minsize=300, stretch="never")
        main_pane.paneconfig(right_frame, minsize=500)
        
        # --- –õ–ï–í–ê–Ø –ü–ê–ù–ï–õ–¨ ---
        notebook = ttk.Notebook(left_frame)
        notebook.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –í–∫–ª–∞–¥–∫–∞ —á–∞—Ç–∞
        chat_frame = ttk.Frame(notebook)
        notebook.add(chat_frame, text="AI –ß–∞—Ç", padding=5)
        
        # –í–∫–ª–∞–¥–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
        project_frame = ttk.Frame(notebook)
        notebook.add(project_frame, text="–ü—Ä–æ–µ–∫—Ç", padding=5)
        
        # –í–∫–ª–∞–¥–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
        history_frame = ttk.Frame(notebook)
        notebook.add(history_frame, text="–ò—Å—Ç–æ—Ä–∏—è", padding=5)
        
        # --- –í–ö–õ–ê–î–ö–ê –ß–ê–¢–ê ---
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
        info_frame = ttk.LabelFrame(chat_frame, text="–¢–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç")
        info_frame.pack(fill=tk.X, padx=5, pady=5)
        
        self.project_name_var = tk.StringVar(value="–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç")
        ttk.Label(info_frame, text="–ù–∞–∑–≤–∞–Ω–∏–µ:").grid(row=0, column=0, padx=5, pady=2, sticky="w")
        name_entry = ttk.Entry(info_frame, textvariable=self.project_name_var, width=30)
        name_entry.grid(row=0, column=1, padx=5, pady=2, sticky="we")
        
        ttk.Label(info_frame, text="–ü–∞–ø–∫–∞:").grid(row=1, column=0, padx=5, pady=2, sticky="w")
        dir_entry = ttk.Entry(info_frame, textvariable=self.project_dir, width=30)
        dir_entry.grid(row=1, column=1, padx=5, pady=2, sticky="we")
        browse_btn = ttk.Button(info_frame, text="–û–±–∑–æ—Ä", command=self.browse_directory, width=8)
        browse_btn.grid(row=1, column=2, padx=5, pady=2)
        
        # –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞
        chat_history_frame = ttk.LabelFrame(chat_frame, text="–î–∏–∞–ª–æ–≥")
        chat_history_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        self.chat_display = scrolledtext.ScrolledText(
            chat_history_frame, 
            wrap=tk.WORD, 
            state='disabled', 
            height=15,
            bg=text_colors['text_bg'],
            fg=text_colors['text_fg'],
            insertbackground=text_colors['insert_bg'],
            selectbackground=text_colors['select_bg']
        )
        self.chat_display.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        self.chat_display.tag_config("user", foreground="#569cd6")
        self.chat_display.tag_config("ai", foreground="#4ec9b0")
        self.chat_display.tag_config("system", foreground="#d7ba7d")
        self.chat_display.tag_config("error", foreground="#f44747")
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —á–∞—Ç–∞
        ContextMenu(self.chat_display)
        
        # –í–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è
        input_frame = ttk.Frame(chat_frame)
        input_frame.pack(fill=tk.X, padx=5, pady=5)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        attach_btn = ttk.Button(input_frame, text="üìé", width=3, command=self.attach_file)
        attach_btn.pack(side=tk.LEFT, padx=(0, 5))
        
        self.user_input = ttk.Entry(input_frame)
        self.user_input.pack(fill=tk.X, expand=True, side=tk.LEFT, padx=(0,5))
        self.user_input.bind("<Return>", lambda event: self.send_message())
        
        send_btn = ttk.Button(input_frame, text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å", command=self.send_message, width=10)
        send_btn.pack(side=tk.RIGHT)
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –≤–≤–æ–¥–∞
        ContextMenu(self.user_input)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        btn_frame = ttk.Frame(chat_frame)
        btn_frame.pack(fill=tk.X, padx=5, pady=5)
        
        ttk.Button(btn_frame, text="–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", command=self.create_project, width=15).pack(side=tk.LEFT, padx=2)
        ttk.Button(btn_frame, text="–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥", command=self.next_step, width=12).pack(side=tk.LEFT, padx=2)
        ttk.Button(btn_frame, text="–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–¥", command=self.refresh_code, width=12).pack(side=tk.LEFT, padx=2)
        ttk.Button(btn_frame, text="–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç", command=self.clear_chat, width=10).pack(side=tk.RIGHT, padx=2)
        
        # --- –í–ö–õ–ê–î–ö–ê –ü–†–û–ï–ö–¢–ê ---
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
        struct_frame = ttk.LabelFrame(project_frame, text="–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞")
        struct_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –î–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤
        self.file_tree = ttk.Treeview(struct_frame)
        self.file_tree.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        self.file_tree.bind("<<TreeviewSelect>>", self.on_file_select)
        
        # –î–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–æ–µ–∫—Ç–æ–º
        action_frame = ttk.Frame(project_frame)
        action_frame.pack(fill=tk.X, padx=5, pady=5)
        
        ttk.Button(action_frame, text="–û—Ç–∫—Ä—ã—Ç—å –≤ VS Code", command=self.open_vscode, width=16).pack(side=tk.LEFT, padx=2)
        ttk.Button(action_frame, text="–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–µ–∫—Ç", command=self.run_project, width=14).pack(side=tk.LEFT, padx=2)
        ttk.Button(action_frame, text="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å", command=self.test_project, width=10).pack(side=tk.LEFT, padx=2)
        ttk.Button(action_frame, text="–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å", command=self.export_project, width=12).pack(side=tk.RIGHT, padx=2)
        
        # --- –í–ö–õ–ê–î–ö–ê –ò–°–¢–û–†–ò–ò ---
        # –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤
        history_list_frame = ttk.LabelFrame(history_frame, text="–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤")
        history_list_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        columns = ("id", "name", "path", "created")
        self.history_tree = ttk.Treeview(history_list_frame, columns=columns, show="headings", height=10)
        
        self.history_tree.heading("id", text="ID")
        self.history_tree.heading("name", text="–ù–∞–∑–≤–∞–Ω–∏–µ")
        self.history_tree.heading("path", text="–ü—É—Ç—å")
        self.history_tree.heading("created", text="–°–æ–∑–¥–∞–Ω")
        
        self.history_tree.column("id", width=50, anchor="center")
        self.history_tree.column("name", width=150)
        self.history_tree.column("path", width=250)
        self.history_tree.column("created", width=120, anchor="center")
        
        self.history_tree.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        self.history_tree.bind("<<TreeviewSelect>>", self.on_history_select)
        
        # –î–µ–π—Å—Ç–≤–∏—è —Å –∏—Å—Ç–æ—Ä–∏–µ–π
        history_btn_frame = ttk.Frame(history_frame)
        history_btn_frame.pack(fill=tk.X, padx=5, pady=5)
        
        ttk.Button(history_btn_frame, text="–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–µ–∫—Ç", command=self.load_selected_project, width=15).pack(side=tk.LEFT, padx=2)
        ttk.Button(history_btn_frame, text="–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç", command=self.delete_selected_project, width=15).pack(side=tk.LEFT, padx=2)
        ttk.Button(history_btn_frame, text="–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", command=self.load_project_history, width=12).pack(side=tk.RIGHT, padx=2)
        
        # --- –ü–†–ê–í–ê–Ø –ü–ê–ù–ï–õ–¨ ---
        # –†–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–¥–∞
        editor_frame = ttk.LabelFrame(right_frame, text="–†–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–¥–∞")
        editor_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        self.code_editor = scrolledtext.ScrolledText(
            editor_frame, 
            wrap=tk.NONE, 
            font=("Consolas", 11),
            bg=text_colors['text_bg'],
            fg=text_colors['text_fg'],
            insertbackground=text_colors['insert_bg'],
            selectbackground=text_colors['select_bg']
        )
        self.code_editor.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –∫–æ–¥–∞
        ContextMenu(self.code_editor)
        
        # –î–µ–π—Å—Ç–≤–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
        editor_btn_frame = ttk.Frame(editor_frame)
        editor_btn_frame.pack(fill=tk.X, padx=5, pady=(0,5))
        
        ttk.Button(editor_btn_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=self.save_current_file, width=10).pack(side=tk.LEFT, padx=2)
        ttk.Button(editor_btn_frame, text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥", command=self.check_code, width=12).pack(side=tk.LEFT, padx=2)
        ttk.Button(editor_btn_frame, text="–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å", command=self.optimize_code, width=12).pack(side=tk.LEFT, padx=2)
        ttk.Button(editor_btn_frame, text="–ó–∞–ø—É—Å—Ç–∏—Ç—å", command=self.execute_code, width=10).pack(side=tk.RIGHT, padx=2)
        
        # –ü–∞–Ω–µ–ª—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        doc_frame = ttk.LabelFrame(right_frame, text="–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
        doc_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        self.doc_display = scrolledtext.ScrolledText(
            doc_frame, 
            wrap=tk.WORD, 
            state='disabled',
            bg=text_colors['text_bg'],
            fg=text_colors['text_fg'],
            insertbackground=text_colors['insert_bg'],
            selectbackground=text_colors['select_bg']
        )
        self.doc_display.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        ContextMenu(self.doc_display)
        
        # –°—Ç—Ä–æ–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        status_bar = ttk.Frame(self.root, relief="sunken", padding=3)
        status_bar.pack(side=tk.BOTTOM, fill=tk.X)
        
        self.status_var = tk.StringVar(value="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        status_label = ttk.Label(status_bar, textvariable=self.status_var)
        status_label.pack(side=tk.LEFT, padx=5)
        
        version_label = ttk.Label(status_bar, text=f"NeuroCod v4.2 | {datetime.now().year}")
        version_label.pack(side=tk.RIGHT, padx=5)
    
    def attach_file(self):
        """–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É"""
        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è",
            filetypes=[("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
        )
        
        if not file_path:
            return
            
        try:
            # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ —á–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            if file_path.endswith(('.txt', '.py', '.js', '.html', '.css', '.json', '.md')):
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                self.add_to_chat(f"–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω —Ñ–∞–π–ª: {os.path.basename(file_path)}\n–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:\n{content}", "system")
            else:
                # –î–ª—è –±–∏–Ω–∞—Ä–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                self.add_to_chat(f"–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω —Ñ–∞–π–ª: {os.path.basename(file_path)} (–±–∏–Ω–∞—Ä–Ω—ã–π)", "system")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ –ø—Ä–æ–µ–∫—Ç
            if self.current_project_data:
                rel_path = os.path.basename(file_path)
                self.current_project_data.setdefault('files', []).append({
                    "path": rel_path,
                    "content": content if 'content' in locals() else "<binary file>"
                })
                self.update_file_tree()
            
            self.set_status(f"–§–∞–π–ª –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω: {os.path.basename(file_path)}")
        except Exception as e:
            self.add_to_chat(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}", "error")
    
    def send_message(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è AI"""
        user_text = self.user_input.get()
        if not user_text:
            return
            
        self.add_to_chat("–í—ã: " + user_text, "user")
        self.user_input.delete(0, tk.END)
        self.chat_history.append({"role": "user", "content": user_text})
        
        threading.Thread(target=self.get_ai_response).start()
    
    def get_ai_response(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç DeepSeek API"""
        self.set_status("–ó–∞–ø—Ä–æ—Å –∫ NeuroCod AI...")
        try:
            client = OpenAI(
                api_key=self.api_key.get(),
                base_url="https://api.deepseek.com/v1"
            )
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø—Ä–æ–µ–∫—Ç–∞
            messages = [{"role": "system", "content": self.get_system_prompt()}]
            messages.extend(self.chat_history[-10:])
            
            if self.current_project_data:
                messages.append({
                    "role": "system",
                    "content": f"–¢–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç: {self.project_name_var.get()}\n" +
                               f"–û–ø–∏—Å–∞–Ω–∏–µ: {self.current_project_data.get('description', '')}\n" +
                               f"–§–∞–π–ª—ã: {', '.join([f['path'] for f in self.current_project_data.get('files', [])])}"
                })
            
            response = client.chat.completions.create(
                model=self.model,
                temperature=self.temperature,
                messages=messages,
                max_tokens=4000
            )
            
            ai_text = response.choices[0].message.content
            self.add_to_chat("NeuroCod: " + ai_text, "ai")
            self.chat_history.append({"role": "assistant", "content": ai_text})
            self.process_ai_response(ai_text)
            
        except Exception as e:
            self.add_to_chat(f"–û—à–∏–±–∫–∞: {str(e)}", "error")
            self.set_status("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞")
    
    def get_system_prompt(self):
        """–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è AI"""
        return (
            "–¢—ã NeuroCod - AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON. "
            "–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:\n"
            "{\n"
            "  \"action\": \"create|update|clarify|complete\",\n"
            "  \"project_name\": \"–Ω–∞–∑–≤–∞–Ω–∏–µ\",\n"
            "  \"description\": \"–æ–ø–∏—Å–∞–Ω–∏–µ\",\n"
            "  \"files\": [\n"
            "    {\"path\": \"–ø—É—Ç—å/—Ñ–∞–π–ª1\", \"content\": \"—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ\"},\n"
            "    ...\n"
            "  ],\n"
            "  \"requirements\": [\"–±–∏–±–ª–∏–æ—Ç–µ–∫–∞1\", ...],\n"
            "  \"documentation\": \"markdown –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è\",\n"
            "  \"next_steps\": [\"—à–∞–≥1\", \"—à–∞–≥2\"]\n"
            "}\n\n"
            "–ü—Ä–∞–≤–∏–ª–∞:\n"
            "1. –î–ª—è –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π action: 'create'\n"
            "2. –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π action: 'update'\n"
            "3. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π action: 'clarify' –∏ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å\n"
            "4. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π action: 'complete'\n"
            "5. –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–∞–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown\n"
            "6. –ü—Ä–µ–¥–ª–∞–≥–∞–π —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏\n"
            "7. –î–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"
        )
    
    def process_ai_response(self, ai_text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ AI –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            project_data = self.extract_json(ai_text)
            if not project_data:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ AI")
                
            action = project_data.get("action", "create")
            
            if action == "clarify":
                clarification = project_data.get("question", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –≤–∞—à–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è.")
                self.add_to_chat(f"NeuroCod: {clarification}", "ai")
                return
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞
            self.current_project_data = project_data
            if "project_name" in project_data:
                self.project_name_var.set(project_data["project_name"])
            
            if "documentation" in project_data:
                self.show_documentation(project_data["documentation"])
            
            if "next_steps" in project_data:
                self.project_steps = project_data["next_steps"]
                self.current_step = 0
                self.show_next_step()
            
            self.update_file_tree()
            
            if action == "complete":
                self.add_to_chat("NeuroCod: –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!", "system")
                self.set_status("–ü—Ä–æ–µ–∫—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
            
            self.set_status("–û—Ç–≤–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            
        except Exception as e:
            self.add_to_chat(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}", "error")
            self.set_status("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    
    def extract_json(self, text):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ AI"""
        try:
            json_match = re.search(r'```json\s*({.*?})\s*```', text, re.DOTALL)
            if json_match:
                return json.loads(json_match.group(1))
            
            json_match = re.search(r'\{.*\}', text, re.DOTALL)
            if json_match:
                return json.loads(json_match.group())
            
            return json.loads(text)
        except Exception as e:
            self.add_to_chat(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {str(e)}", "error")
            return None
    
    def add_to_chat(self, message, sender):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç"""
        self.chat_display.config(state='normal')
        
        if sender == "user":
            self.chat_display.insert(tk.END, message + "\n", "user")
        elif sender == "ai":
            self.chat_display.insert(tk.END, message + "\n\n", "ai")
        elif sender == "system":
            self.chat_display.insert(tk.END, message + "\n", "system")
        else:
            self.chat_display.insert(tk.END, message + "\n", "error")
            
        self.chat_display.config(state='disabled')
        self.chat_display.see(tk.END)
    
    def update_file_tree(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
        if not self.file_tree:
            return
            
        for item in self.file_tree.get_children():
            self.file_tree.delete(item)
        
        files = self.current_project_data.get("files", [])
        for file in files:
            path = file["path"]
            parts = path.split("/")
            parent = ""
            for i, part in enumerate(parts):
                if i == len(parts) - 1:
                    self.file_tree.insert(parent, "end", text=part, values=(path, "file"))
                else:
                    existing = self.find_tree_item(parent, part)
                    if not existing:
                        parent = self.file_tree.insert(parent, "end", text=part, values=("/".join(parts[:i+1]), "folder"))
                    else:
                        parent = existing
    
    def find_tree_item(self, parent, text):
        """–ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –¥–µ—Ä–µ–≤–µ —Ñ–∞–π–ª–æ–≤"""
        for child in self.file_tree.get_children(parent):
            if self.file_tree.item(child, "text") == text:
                return child
        return None
    
    def on_file_select(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –≤ –¥–µ—Ä–µ–≤–µ"""
        if not self.code_editor:
            return
            
        selected = self.file_tree.selection()
        if not selected:
            return
            
        item = selected[0]
        values = self.file_tree.item(item, "values")
        if values and len(values) > 0 and values[1] == "file":
            path = values[0]
            for file in self.current_project_data.get("files", []):
                if file["path"] == path:
                    self.code_editor.delete(1.0, tk.END)
                    self.code_editor.insert(tk.END, file.get("content", ""))
                    self.current_file = path
                    self.set_status(f"–û—Ç–∫—Ä—ã—Ç —Ñ–∞–π–ª: {path}")
                    break
    
    def save_current_file(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ"""
        if not hasattr(self, "current_file") or not self.current_file:
            return
            
        content = self.code_editor.get(1.0, tk.END)
        
        for file in self.current_project_data.get("files", []):
            if file["path"] == self.current_file:
                file["content"] = content
                break
        
        self.add_to_chat(f"–§–∞–π–ª {self.current_file} —Å–æ—Ö—Ä–∞–Ω–µ–Ω", "system")
        self.set_status(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {self.current_file}")
    
    def show_documentation(self, markdown_text):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        self.doc_display.config(state='normal')
        self.doc_display.delete(1.0, tk.END)
        
        html_content = markdown.markdown(markdown_text)
        plain_text = html.unescape(re.sub('<[^<]+?>', '', html_content))
        
        self.doc_display.insert(tk.END, plain_text)
        self.doc_display.config(state='disabled')
    
    def show_next_step(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
        if self.current_step < len(self.project_steps):
            step = self.project_steps[self.current_step]
            self.add_to_chat(f"–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: {step}", "system")
            self.current_step += 1
        else:
            self.add_to_chat("–í—Å–µ —à–∞–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!", "system")
    
    def next_step(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
        self.show_next_step()
        if self.current_step <= len(self.project_steps):
            self.add_to_chat("–í—ã: –†–µ–∞–ª–∏–∑—É–π —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥", "user")
            self.chat_history.append({"role": "user", "content": "–†–µ–∞–ª–∏–∑—É–π —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥"})
            threading.Thread(target=self.get_ai_response).start()
    
    def refresh_code(self):
        """–ó–∞–ø—Ä–æ—Å –∫ AI –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞"""
        self.add_to_chat("–í—ã: –ü—Ä–æ–≤–µ—Ä—å –∏ –æ–±–Ω–æ–≤–∏ –∫–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞", "user")
        self.chat_history.append({"role": "user", "content": "–ü—Ä–æ–≤–µ—Ä—å –∏ –æ–±–Ω–æ–≤–∏ –∫–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞"})
        threading.Thread(target=self.get_ai_response).start()
    
    def create_project(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if not self.current_project_data:
            self.add_to_chat("–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è", "error")
            return
            
        self.set_status("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞...")
        try:
            base_dir = filedialog.askdirectory(
                title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞",
                initialdir=self.project_dir.get()
            )
            
            if not base_dir:
                return
                
            self.project_dir.set(base_dir)
            project_name = self.project_name_var.get()
            project_path = os.path.join(base_dir, project_name)
            os.makedirs(project_path, exist_ok=True)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è Python
            venv_path = os.path.join(project_path, "venv")
            venv.create(venv_path, with_pip=True)
            self.add_to_chat(f"–°–æ–∑–¥–∞–Ω–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ Python: {venv_path}", "system")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
            for file in self.current_project_data.get("files", []):
                file_path = os.path.join(project_path, file['path'])
                os.makedirs(os.path.dirname(file_path), exist_ok=True)
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(file.get('content', ''))
            
            # –°–æ–∑–¥–∞–Ω–∏–µ requirements.txt
            requirements = self.current_project_data.get('requirements', [])
            if requirements:
                req_path = os.path.join(project_path, 'requirements.txt')
                with open(req_path, 'w') as f:
                    f.write("\n".join(requirements))
                
                # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
                if sys.platform == "win32":
                    pip_path = os.path.join(venv_path, "Scripts", "pip.exe")
                else:
                    pip_path = os.path.join(venv_path, "bin", "pip")
                
                if os.path.exists(pip_path):
                    try:
                        subprocess.run([pip_path, "install", "-r", req_path], 
                                      cwd=project_path, check=True)
                        self.add_to_chat("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏", "system")
                    except subprocess.CalledProcessError as e:
                        self.add_to_chat(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {str(e)}", "error")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            documentation = self.current_project_data.get('documentation', '')
            if documentation:
                with open(os.path.join(project_path, 'DOCUMENTATION.md'), 'w', encoding='utf-8') as f:
                    f.write(documentation)
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.add_to_project_history(project_name, project_path)
            self.current_project_path = project_path
            self.add_to_chat(f"–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω: {project_path}", "system")
            self.set_status(f"–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω: {project_name}")
            self.open_vscode()
            
        except Exception as e:
            self.add_to_chat(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {str(e)}", "error")
            self.set_status("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞")
    
    def add_to_project_history(self, name, path):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        project_id = str(uuid.uuid4())[:8]
        created = datetime.now().strftime("%Y-%m-%d %H:%M")
        
        self.project_history.append({
            "id": project_id,
            "name": name,
            "path": path,
            "created": created
        })
        
        history_file = os.path.join(os.path.dirname(__file__), "neurocod_history.json")
        with open(history_file, 'w', encoding='utf-8') as f:
            json.dump(self.project_history, f, ensure_ascii=False, indent=2)
        
        self.load_project_history()
    
    def load_project_history(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        if not self.history_tree:
            return
            
        for item in self.history_tree.get_children():
            self.history_tree.delete(item)
        
        history_file = os.path.join(os.path.dirname(__file__), "neurocod_history.json")
        if os.path.exists(history_file):
            try:
                with open(history_file, 'r', encoding='utf-8') as f:
                    self.project_history = json.load(f)
            except:
                self.project_history = []
        
        for project in self.project_history:
            self.history_tree.insert("", "end", values=(
                project["id"],
                project["name"],
                project["path"],
                project["created"]
            ))
    
    def on_history_select(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏"""
        selected = self.history_tree.selection()
        if selected:
            item = selected[0]
            values = self.history_tree.item(item, "values")
            if values:
                self.project_name_var.set(values[1])
                self.project_dir.set(values[2])
    
    def load_selected_project(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏"""
        selected = self.history_tree.selection()
        if not selected:
            return
            
        item = selected[0]
        values = self.history_tree.item(item, "values")
        if not values:
            return
            
        project_path = values[2]
        if not os.path.exists(project_path):
            self.add_to_chat(f"–û—à–∏–±–∫–∞: –ø—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç {project_path}", "error")
            return
            
        self.current_project_path = project_path
        self.project_name_var.set(values[1])
        
        # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
        files = []
        for root, _, filenames in os.walk(project_path):
            for filename in filenames:
                if filename.startswith('venv') and 'python' in filename.lower():
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
                    
                file_path = os.path.join(root, filename)
                rel_path = os.path.relpath(file_path, project_path)
                
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                except:
                    content = "<binary file>"
                
                files.append({"path": rel_path, "content": content})
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        documentation = ""
        doc_path = os.path.join(project_path, "DOCUMENTATION.md")
        if os.path.exists(doc_path):
            with open(doc_path, 'r', encoding='utf-8') as f:
                documentation = f.read()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞
        self.current_project_data = {
            "project_name": values[1],
            "description": f"–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç: {values[1]}",
            "files": files,
            "requirements": self.get_requirements(project_path),
            "documentation": documentation
        }
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.update_file_tree()
        self.show_documentation(documentation)
        self.add_to_chat(f"–ü—Ä–æ–µ–∫—Ç {values[1]} –∑–∞–≥—Ä—É–∂–µ–Ω", "system")
        self.set_status(f"–ü—Ä–æ–µ–∫—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: {values[1]}")
    
    def get_requirements(self, project_path):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏–∑ requirements.txt"""
        req_path = os.path.join(project_path, "requirements.txt")
        if os.path.exists(req_path):
            with open(req_path, 'r') as f:
                return [line.strip() for line in f if line.strip()]
        return []
    
    def delete_selected_project(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏"""
        selected = self.history_tree.selection()
        if not selected:
            return
            
        item = selected[0]
        values = self.history_tree.item(item, "values")
        if not values:
            return
            
        project_id = values[0]
        
        if not messagebox.askyesno("–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞", "–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏?"):
            return
            
        self.project_history = [p for p in self.project_history if p["id"] != project_id]
        
        history_file = os.path.join(os.path.dirname(__file__), "neurocod_history.json")
        with open(history_file, 'w', encoding='utf-8') as f:
            json.dump(self.project_history, f, ensure_ascii=False, indent=2)
        
        self.load_project_history()
        self.add_to_chat(f"–ü—Ä–æ–µ–∫—Ç {values[1]} —É–¥–∞–ª–µ–Ω –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏", "system")
    
    def open_vscode(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤ VSCode"""
        if not self.current_project_path:
            self.add_to_chat("–û—à–∏–±–∫–∞: –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞", "error")
            return
            
        try:
            if sys.platform == "win32":
                subprocess.Popen(["code", self.current_project_path], shell=True)
            elif sys.platform == "darwin":
                subprocess.Popen(["open", "-a", "Visual Studio Code", self.current_project_path])
            else:
                subprocess.Popen(["code", self.current_project_path])
                
            self.add_to_chat(f"–ü—Ä–æ–µ–∫—Ç –æ—Ç–∫—Ä—ã—Ç –≤ VS Code: {self.current_project_path}", "system")
            self.set_status("–ü—Ä–æ–µ–∫—Ç –æ—Ç–∫—Ä—ã—Ç –≤ VS Code")
        except Exception as e:
            self.add_to_chat(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ VS Code: {str(e)}", "error")
    
    def run_project(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞"""
        if not self.current_project_path:
            self.add_to_chat("–û—à–∏–±–∫–∞: –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞", "error")
            return
            
        main_file = simpledialog.askstring("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞", "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ñ–∞–π–ª—É:", 
                                          initialvalue="main.py")
        if not main_file:
            return
            
        main_path = os.path.join(self.current_project_path, main_file)
        if not os.path.exists(main_path):
            self.add_to_chat(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω {main_path}", "error")
            return
            
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä—É –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
            venv_python = self.get_venv_python()
            
            if venv_python:
                subprocess.Popen([venv_python, main_path], cwd=self.current_project_path)
                self.add_to_chat(f"–ó–∞–ø—É—â–µ–Ω —Ñ–∞–π–ª –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏: {main_file}", "system")
            else:
                if sys.platform == "win32":
                    subprocess.Popen(["python", main_path], cwd=self.current_project_path, shell=True)
                else:
                    subprocess.Popen(["python3", main_path], cwd=self.current_project_path)
                self.add_to_chat(f"–ó–∞–ø—É—â–µ–Ω —Ñ–∞–π–ª: {main_file}", "system")
                
            self.set_status(f"–ó–∞–ø—É—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞: {main_file}")
        except Exception as e:
            self.add_to_chat(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}", "error")
    
    def get_venv_python(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä—É –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏"""
        if not self.current_project_path:
            return None
            
        venv_path = os.path.join(self.current_project_path, "venv")
        if not os.path.exists(venv_path):
            return None
            
        if sys.platform == "win32":
            python_path = os.path.join(venv_path, "Scripts", "python.exe")
        else:
            python_path = os.path.join(venv_path, "bin", "python")
            
        return python_path if os.path.exists(python_path) else None
    
    def test_project(self):
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
        if not self.current_project_path:
            self.add_to_chat("–û—à–∏–±–∫–∞: –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞", "error")
            return
            
        try:
            test_path = os.path.join(self.current_project_path, "tests")
            if not os.path.exists(test_path):
                self.add_to_chat("–¢–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", "system")
                return
                
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä—É –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
            venv_python = self.get_venv_python()
            
            if venv_python:
                process = subprocess.Popen([venv_python, "-m", "pytest"], 
                                         cwd=self.current_project_path,
                                         stdout=subprocess.PIPE, 
                                         stderr=subprocess.PIPE)
            else:
                if sys.platform == "win32":
                    process = subprocess.Popen(["pytest"], 
                                             cwd=self.current_project_path,
                                             stdout=subprocess.PIPE, 
                                             stderr=subprocess.PIPE, 
                                             shell=True)
                else:
                    process = subprocess.Popen(["pytest"], 
                                             cwd=self.current_project_path,
                                             stdout=subprocess.PIPE, 
                                             stderr=subprocess.PIPE)
                
            stdout, stderr = process.communicate()
            
            self.add_to_chat("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:", "system")
            self.add_to_chat(stdout.decode("utf-8", "ignore"), "system")
            
            if stderr:
                self.add_to_chat("–û—à–∏–±–∫–∏ —Ç–µ—Å—Ç–æ–≤:", "error")
                self.add_to_chat(stderr.decode("utf-8", "ignore"), "error")
                
            self.set_status("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        except Exception as e:
            self.add_to_chat(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤: {str(e)}", "error")
    
    def export_project(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–∞ –∫–∞–∫ zip-–∞—Ä—Ö–∏–≤–∞"""
        if not self.current_project_path:
            self.add_to_chat("–û—à–∏–±–∫–∞: –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞", "error")
            return
            
        export_path = filedialog.askdirectory(title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
        if not export_path:
            return
            
        try:
            project_name = self.project_name_var.get()
            zip_path = os.path.join(export_path, f"{project_name}.zip")
            shutil.make_archive(os.path.join(export_path, project_name), 'zip', self.current_project_path)
            
            self.add_to_chat(f"–ü—Ä–æ–µ–∫—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: {zip_path}", "system")
            self.set_status(f"–ü—Ä–æ–µ–∫—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: {zip_path}")
        except Exception as e:
            self.add_to_chat(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}", "error")
    
    def check_code(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞"""
        if not hasattr(self, "current_file") or not self.current_file:
            self.add_to_chat("–û—à–∏–±–∫–∞: –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞", "error")
            return
            
        content = self.code_editor.get(1.0, tk.END)
        if not content:
            return
            
        self.add_to_chat(f"–í—ã: –ü—Ä–æ–≤–µ—Ä—å –∫–æ–¥ —Ñ–∞–π–ª–∞ {self.current_file}", "user")
        self.chat_history.append({
            "role": "user", 
            "content": f"–ü—Ä–æ–≤–µ—Ä—å —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥ –Ω–∞ –æ—à–∏–±–∫–∏:\n```\n{content}\n```"
        })
        threading.Thread(target=self.get_ai_response).start()
        self.set_status("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞...")
    
    def optimize_code(self):
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–¥–∞"""
        if not hasattr(self, "current_file") or not self.current_file:
            self.add_to_chat("–û—à–∏–±–∫–∞: –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞", "error")
            return
            
        content = self.code_editor.get(1.0, tk.END)
        if not content:
            return
            
        self.add_to_chat(f"–í—ã: –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –∫–æ–¥ —Ñ–∞–π–ª–∞ {self.current_file}", "user")
        self.chat_history.append({
            "role": "user", 
            "content": f"–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥:\n```\n{content}\n```"
        })
        threading.Thread(target=self.get_ai_response).start()
        self.set_status("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–¥–∞...")
    
    def execute_code(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ –∫–æ–¥–∞"""
        if not hasattr(self, "current_file") or not self.current_file:
            self.add_to_chat("–û—à–∏–±–∫–∞: –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞", "error")
            return
            
        try:
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
            self.save_current_file()
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞
            file_path = os.path.join(self.current_project_path, self.current_file)
            if not os.path.exists(file_path):
                self.add_to_chat(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω {file_path}", "error")
                return
                
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä—É –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
            venv_python = self.get_venv_python()
            
            if venv_python:
                process = subprocess.Popen(
                    [venv_python, file_path], 
                    cwd=self.current_project_path,
                    stdout=subprocess.PIPE, 
                    stderr=subprocess.PIPE
                )
                self.add_to_chat(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏: {self.current_file}", "system")
            else:
                if sys.platform == "win32":
                    process = subprocess.Popen(
                        ["python", file_path], 
                        cwd=self.current_project_path,
                        stdout=subprocess.PIPE, 
                        stderr=subprocess.PIPE, 
                        shell=True
                    )
                else:
                    process = subprocess.Popen(
                        ["python3", file_path], 
                        cwd=self.current_project_path,
                        stdout=subprocess.PIPE, 
                        stderr=subprocess.PIPE
                    )
                
            stdout, stderr = process.communicate()
            
            self.add_to_chat("–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:", "system")
            if stdout:
                self.add_to_chat(stdout.decode("utf-8", "ignore"), "system")
            if stderr:
                self.add_to_chat(stderr.decode("utf-8", "ignore"), "error")
                
            self.set_status("–ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω")
        except Exception as e:
            self.add_to_chat(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}", "error")
    
    def clear_chat(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞"""
        self.chat_display.config(state='normal')
        self.chat_display.delete(1.0, tk.END)
        self.chat_display.config(state='disabled')
        self.chat_history = []
        self.add_to_chat("–ß–∞—Ç –æ—á–∏—â–µ–Ω", "system")
        self.set_status("–ß–∞—Ç –æ—á–∏—â–µ–Ω")
    
    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        config_path = os.path.join(os.path.dirname(__file__), "neurocod_config.json")
        if os.path.exists(config_path):
            try:
                with open(config_path, 'r') as f:
                    config = json.load(f)
                    self.api_key.set(config.get("api_key", NEUROCOD_API_KEY))
                    self.project_dir.set(config.get("project_dir", self.project_dir.get()))
            except:
                pass
    
    def save_config(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        config = {
            "api_key": self.api_key.get(),
            "project_dir": self.project_dir.get()
        }
        
        config_path = os.path.join(os.path.dirname(__file__), "neurocod_config.json")
        with open(config_path, 'w') as f:
            json.dump(config, f)
    
    def set_status(self, message):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        self.status_var.set(message)
        self.root.update_idletasks()
    
    def on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.save_config()
        self.root.destroy()

def create_installer():
    """–°–æ–∑–¥–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    # –ó–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
    print("–°–æ–∑–¥–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞...")
    # –ù–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ PyInstaller –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è .exe:
    # pyinstaller --onefile --windowed --icon=app.ico --name "NeuroCod" app.py
    
    # –ó–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Inno Setup –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Å—Ç–∞–ª–ª—è—Ç–æ—Ä–∞:
    # https://jrsoftware.org/isinfo.php

if __name__ == "__main__":
    root = tk.Tk()
    app = NeuroCodApp(root)
    root.protocol("WM_DELETE_WINDOW", app.on_closing)
    root.mainloop()